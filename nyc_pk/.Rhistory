plot(cylinders, mpg)
cylinders <- as.factor(cylinders)
plot(x=cylinders, y=mpg)
plot(x=cylinders, y=mpg)
plot(x=Auto$cylinders, y=Auto$mpg)
cylinders <- as.factor(Auto$cylinders)
plot(x=cylinders, y=Auto$mpg)
plot(x=cylinders, y=Auto$mpg, col="red", varwidth=T, horizontal=T)
hist(mpg, col=2, breaks=15)
hist(Auto$mpg, col=2, breaks=15)
pairs(Auto)
pairs(~mpg + displacement + horsepower + weight + acceleration, Auto)
plot(horsepower, mpg)
attach(Auto)
plot(horsepower, mpg)
identity(horsepower, mpg, name)
attach(Auto)
plot(horsepower, mpg)
identity(horsepower, mpg, name)
attach(Auto)
# plot(horsepower, mpg)
identity(horsepower, mpg, name)
# plot(horsepower, mpg)
identity(horsepower)
# plot(horsepower, mpg)
identify(horsepower, mpg, name)
install.packages(c("ggplot2", "tidyverse", "ISLR"))
A = matrix(1:16, 4, 4)
A
A[2, 3]
A[c(1, 3), c(2, 4)]
a[1:3, 2:4]
A[1:3, 2:4]
install.packages(c("BH", "cli", "fansi", "farver", "hms", "knitr", "prettyunits", "rmarkdown", "SQUAREM", "stringi", "tinytex", "xfun"))
install.packages(c("rlang", "tidyselect"))
install.packages(c("dplyr", "rlang", "tidyselect", "yaml"))
library(tidyverse)
#1
g <- ggplot(data = cars, mapping = aes(x = speed, y = dist)) +
geom_point()
#2
g + ggtitle("Stopping Distance vs. Speed")
#2
g +
ggtitle("Stopping Distance vs. Speed") +
ylab("Stopping Distance (ft)") +
xlab("Speed (mpg)")
#2
g <- g +
ggtitle("Stopping Distance vs. Speed") +
ylab("Stopping Distance (ft)") +
xlab("Speed (mpg)")
g
#3
g + geom_point(color='red')
#3
g + geom_point(color='red', shape=17)
?geom_point
# question 2
as.tipple(faithful)
as.tibble(faithful)
as_tibble(faithful)
ifelse(test = eruption > 3.2, yes = "short", no = "long")
ifelse(test = faithful$eruption > 3.2, yes = "short", no = "long")
f <- faithful
f$length <- ifelse(test = faithful$eruption > 3.2, yes = "short", no = "long")
f
ggplot(data = f, mapping = aes(x = f$length, y = f$waiting)) +
geom_boxplot()
ggplot(data = f, mapping = aes(x = f$length, y = f$waiting)) +
geom_boxplot() +
geom_density()
ggplot(data = f, mapping = aes(x = f$length, y = f$waiting)) +
geom_boxplot() +
geom_density(y = f$waiting)
# 3
Knicks.rda
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
# 3
load(url('https://s3.amazonaws.com/graderdata/Knicks.rda'))
as.tibble(data)
data %>%
group_by(., season) %>%
mutate(., win_TF = win == "W") %>%
summarise(., tot_games = n(), tot_wins = sum(win_TF))
data %>%
group_by(., season) %>%
mutate(., win_TF = win == "W") %>%
summarise(., tot_games = n(), tot_wins = sum(win_TF)) %>%
mutate(., win_ratio = tot_wins / tot_games)
data %>%
group_by(., season) %>%
mutate(., win_TF = win == "W") %>%
summarise(., tot_games = n(), tot_wins = sum(win_TF)) %>%
mutate(., win_ratio = tot_wins / tot_games) +
ggplot(data = ., mapping = aes(x = season, y = win_ratio)) +
geom_col()
data %>%
group_by(., season) %>%
mutate(., win_TF = win == "W") %>%
summarise(., tot_games = n(), tot_wins = sum(win_TF)) %>%
mutate(., win_ratio = tot_wins / tot_games) %>%
ggplot(data = ., mapping = aes(x = season, y = win_ratio)) +
geom_col()
data %>%
group_by(., season) %>%
mutate(., win_TF = win == "W") %>%
summarise(., tot_games = n(), tot_wins = sum(win_TF)) %>%
mutate(., win_ratio = tot_wins / tot_games) %>%
ggplot(data = ., mapping = aes(x = season, y = win_ratio)) +
geom_col() +
ggtitle("New York Knicks Win % by Season")
# Part II
data %>%
group_by(., season, visiting) %>%
mutate(., win_TF = win == "W", home_away = ifelse(test = visiting == 1, yes = "Away", no = "Home")) %>%
summarise(., tot_games = n(), tot_wins = sum(win_TF)) %>%
mutate(., win_ratio = tot_wins / tot_games)
# Part II
data %>%
mutate(., win_TF = win == "W", home_away = ifelse(test = visiting == 1, yes = "Away", no = "Home")) %>%
group_by(., season, home_away) %>%
summarise(., tot_games = n(), tot_wins = sum(win_TF)) %>%
mutate(., win_ratio = tot_wins / tot_games)
# Part II
data %>%
mutate(., win_TF = win == "W", home_away = ifelse(test = visiting == 1, yes = "Away", no = "Home")) %>%
group_by(., season, home_away) %>%
summarise(., tot_games = n(), tot_wins = sum(win_TF)) %>%
mutate(., win_ratio = tot_wins / tot_games) %>%
ggplot(data = ., mapping = aes(x = season, y = win_ratio)) +
geom_col() +
ggtitle("New York Knicks Win % by Season")
# Part II
data %>%
mutate(., win_TF = win == "W", home_away = ifelse(test = visiting == 1, yes = "Away", no = "Home")) %>%
group_by(., season, home_away) %>%
summarise(., tot_games = n(), tot_wins = sum(win_TF)) %>%
mutate(., win_ratio = tot_wins / tot_games) %>%
ggplot(data = ., mapping = aes(x = season, y = win_ratio)) +
geom_col(aes(fill = home_away)) +
ggtitle("New York Knicks Win % by Season")
# Part II
data %>%
mutate(., win_TF = win == "W", home_away = ifelse(test = visiting == 1, yes = "Away", no = "Home")) %>%
group_by(., season, home_away) %>%
summarise(., tot_games = n(), tot_wins = sum(win_TF)) %>%
mutate(., win_ratio = tot_wins / tot_games) %>%
ggplot(data = ., mapping = aes(x = season, y = win_ratio)) +
geom_col(aes(fill = home_away), position = "dodge") +
ggtitle("New York Knicks Win % by Season")
# Part III
data %>%
ggplot(data = ., mapping(aes(x = points))) +
geom_histogram()
# Part III
data %>%
ggplot(data = ., mapping = (aes(x = points))) +
geom_histogram()
# Part III
data %>%
ggplot(data = ., mapping = (aes(x = points))) +
geom_histogram() +
facet_wrap(., rows = vars(season))
# Part III
data %>%
ggplot(data = ., mapping = (aes(x = points))) +
geom_histogram() +
facet_grid(., rows = vars(season))
# Part III
data %>%
ggplot(data = ., mapping = (aes(x = points))) +
geom_histogram() +
facet_grid(rows = vars(season))
install.packages(c("dplyr", "jsonlite", "mapproj", "rlang", "tidyselect"))
library(leaflet)
library(maps)
Andrew <- leaflet(Andrew)
library(googleVis)
library(tidyverse)
leaflet(Andrew) %>% as_tibble(.)
leaflet(Andrew)
install.packages(c("dplyr", "DT", "jsonlite", "mapproj", "mime", "rlang", "tidyselect"))
shiny::runApp('Jason/NYC Data Science Academy/projects/shiny/nyc_pk_schools/nyc_pk')
library(devtools)
install.packages("devtools")
devtools::install_github('bbc/bbplot')
devtools::install_github('cttobin/ggthemr')
setwd("~/Jason/NYC Data Science Academy/projects/shiny/nyc_pk_schools/nyc_pk")
library(shiny)
library(shinydashboard)
library(geojsonsf)
library(sf)
library(janitor)
library(leaflet)
library(leaflet.providers)
library(tmap)
library(tmaptools)
library(maps)
library(tidyverse)
options(scipen = 999)
# collect file paths
nyc_pop_by_nta_fp <- "./data/New_York_City_Population_By_Neighborhood_Tabulation_Areas.csv"
nyc_pk_loc_fp <- "./data/Universal_Pre-K__UPK__School_Locations.csv"
# location information for pre-k schools in NYC
nyc_pk <- read_csv(file = nyc_pk_loc_fp)
nyc_pk <- nyc_pk %>% rename(., lat = Latitude, lng = Longitude)
# aggregate pk school information at the nta level
pk_by_nta <- nyc_pk %>%
clean_names(.) %>%
group_by(., borough, nta) %>%
summarise(., schl_per_nta = n(), seats_per_nta = sum(seats)) %>%
ungroup()
# geo information for nyc's nta grid (nta = neighborhood tabular area)
nyc_nta_sf <- geojson_sf(geojson = './data/nyc_nta.geojson')
# population import
nyc_pop <- read_csv(file = nyc_pop_by_nta_fp)
nyc_pop
nyc_pop <- nyc_pop %>% filter(., Year == 2010) # only bring in 2010 census information that is in the file
# name clean
nyc_pop <- clean_names(dat = nyc_pop)
nyc_nta_sf <- clean_names(dat = nyc_nta_sf)
# combine map and population information
map_and_pop <- right_join(x = nyc_pop, y = nyc_nta_sf, by = 'nta_code')
# combine pk school information together with map_and_pop
map_and_pk_and_pop <- inner_join(x = pk_by_nta, y = map_and_pop, by = c("nta" = "nta_name.x")) %>%
mutate(., seats_per_1000 = seats_per_nta / (population / 1000)) %>%
st_as_sf(x = ., sf_column_name = "geometry") # has to be converted back to a spatial form data type
library(ggthemr)
library(bbplot)
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fille = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Pre-K Seats per 1000")) +
labs(title = "Pre-K Spread of Seats per 1k Population",
subtitle = "Distribution of seats per 1k in NYC")
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Pre-K Seats per 1000")) +
labs(title = "Pre-K Spread of Seats per 1k Population",
subtitle = "Distribution of seats per 1k in NYC")
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats per 1k")) +
labs(title = "Pre-K Spread of Seats per 1k Population",
subtitle = "Distribution of seats per 1k in NYC")
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "Pre-K Spread of Seats per 1k Population",
subtitle = "Distribution of seats per 1k in NYC")
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "Pre-K Spread of Seats per 1k Population",
subtitle = "Distribution of Seats per 1000 in NYC")
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "Spread of Seats per 1k Population",
subtitle = "Distribution of Pre-K Seats per 1000 in NYC")
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Varies Across NTAs",
subtitle = "Distribution of Pre-K Seats per 1000 in NYC")
ggthemr("earth")
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Varies Across NTAs",
subtitle = "Distribution of Pre-K Seats per 1000 in NYC")
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000)#,
#binwidth = 5, colour = "white", fill = "#1380A1"
) +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Varies Across NTAs",
subtitle = "Distribution of Pre-K Seats per 1000 in NYC")
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Varies Across NTAs",
subtitle = "Distribution of Pre-K Seats per 1000 in NYC")
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Varies Across NTAs",
subtitle = "Distribution of Pre-K Seats per 1000 in NYC") +
xlab("Number of Neighborhood Tabular Areas")
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Varies Across NYC NTAs",
subtitle = "Distribution of Pre-K Seats per 1000") +
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Varies",
subtitle = "Distribution of Pre-K Seats per 1000") +
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Varies",
subtitle = "Distribution of Pre-K Seats per 1000") +
ggplot(data = map_and_pk_and_pop) +
geom_histogram(mapping = aes(x = seats_per_1000),
binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Varies",
subtitle = "Distribution of Pre-K Seats per 1000")
ggplot(data = map_and_pk_and_pop, mapping(aes(x = seats_per_1000))) +
geom_histogram(binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Varies",
subtitle = "Distribution of Pre-K Seats per 1000")
ggplot(data = map_and_pk_and_pop, mapping = aes(x = seats_per_1000)) +
geom_histogram(binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Varies",
subtitle = "Distribution of Pre-K Seats per 1000")
ggplot(data = map_and_pk_and_pop, mapping = aes(x = seats_per_1000)) +
geom_histogram(binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Vary Across NYC",
subtitle = "Distribution of Pre-K Seats per 1000")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tm <- tm_shape(map_and_pk_and_pop) +
tm_polygons("seats_per_1000", id = "nta_code", palette = "Greens")
library(shiny)
library(shinydashboard)
library(geojsonsf)
library(sf)
library(janitor)
library(leaflet)
library(leaflet.providers)
library(tmap)
library(tmaptools)
library(maps)
library(tidyverse)
library(bbplot)
options(scipen = 999)
# collect file paths
nyc_pop_by_nta_fp <- "./data/New_York_City_Population_By_Neighborhood_Tabulation_Areas.csv"
nyc_pk_loc_fp <- "./data/Universal_Pre-K__UPK__School_Locations.csv"
# location information for pre-k schools in NYC
nyc_pk <- read_csv(file = nyc_pk_loc_fp)
nyc_pk <- nyc_pk %>% rename(., lat = Latitude, lng = Longitude)
# aggregate pk school information at the nta level
pk_by_nta <- nyc_pk %>%
clean_names(.) %>%
group_by(., borough, nta) %>%
summarise(., schl_per_nta = n(), seats_per_nta = sum(seats)) %>%
ungroup()
# geo information for nyc's nta grid (nta = neighborhood tabular area)
nyc_nta_sf <- geojson_sf(geojson = './data/nyc_nta.geojson')
# population import
nyc_pop <- read_csv(file = nyc_pop_by_nta_fp)
nyc_pop
nyc_pop <- nyc_pop %>% filter(., Year == 2010) # only bring in 2010 census information that is in the file
# name clean
nyc_pop <- clean_names(dat = nyc_pop)
nyc_nta_sf <- clean_names(dat = nyc_nta_sf)
# combine map and population information
map_and_pop <- right_join(x = nyc_pop, y = nyc_nta_sf, by = 'nta_code')
# combine pk school information together with map_and_pop
map_and_pk_and_pop <- inner_join(x = pk_by_nta, y = map_and_pop, by = c("nta" = "nta_name.x")) %>%
mutate(., seats_per_1000 = seats_per_nta / (population / 1000)) %>%
st_as_sf(x = ., sf_column_name = "geometry") # has to be converted back to a spatial form data type
tm <- tm_shape(map_and_pk_and_pop) +
tm_polygons("seats_per_1000", id = "nta_code", palette = "Greens")
tm
ggplot(data = map_and_pk_and_pop, mapping = aes(x = seats_per_1000)) +
geom_histogram(binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Vary Across NYC",
subtitle = "Distribution of Pre-K Seats per 1000")
runApp()
runApp()
runApp()
runApp()
warmings()
warnings()
install.packages("extrafont")
font_import()
library(extrafont)
font_import()
runApp()
ggplot(data = map_and_pk_and_pop, mapping = aes(x = seats_per_1000)) +
geom_histogram(binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Vary Across NYC",
subtitle = "Distribution of Pre-K Seats per 1000")
warnings()
warnings()
names(wf[wf=="TT Times New Roman"])
install.packages("showtexts")
ggplot(data = map_and_pk_and_pop, mapping = aes(x = seats_per_1000)) +
geom_histogram(binwidth = 5, colour = "white", fill = "#1380A1") +
geom_hline(yintercept = 0, size = 1, colour = "#333333") +
# bbc_style() +
scale_x_continuous(limits = c(0, 55),
breaks = seq(10, 50, by = 10),
labels = c("10", "20", "30", "40", "50 Seats")) +
labs(title = "How Available Seats Vary Across NYC",
subtitle = "Distribution of Pre-K Seats per 1000")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
